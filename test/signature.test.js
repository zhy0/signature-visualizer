var assert = require('assert');
var math = require('mathjs');
var sig = require('../src/signature');

describe('tensorProduct', function() {
    it('should handle the edge cases', function() {
        // right multiply with scalar
        assert.deepStrictEqual(
            sig.tensorProduct([1,2,3], 1),
            [1,2,3]
        );
        // left multiply with scalar
        assert.deepStrictEqual(
            sig.tensorProduct(1, [1,2,3]),
            [1,2,3]
        );
    });

    it('should return the right dimensions', function() {
        var r1 = [2,3,4,5];
        var r2 = [8,4,5];
        var A = math.zeros(r1);
        var B = math.zeros(r2);
        assert.deepStrictEqual(
            math.size(sig.tensorProduct(A,B)),
            r1.concat(r2)
        );
    });

    it('should calculate tensor product of two tensors', function() {
        assert.deepStrictEqual(
            sig.tensorProduct(
                [[1,2,3,4], [5,6,7,8]],
                [9,10,11,12]
            ),
            [[[9, 10, 11, 12], [18, 20, 22, 24], [27, 30, 33, 36], [36, 40, 44, 48]], [[45, 50, 55, 60], [54, 60, 66, 72], [63, 70, 77, 84], [72, 80, 88, 96]]]
        );
    });
});


describe('tensorPow', function() {
    it('should handle the base cases', function() {
        assert.deepStrictEqual(
            sig.tensorPow([1,2,3], 0),
            1
        );
        assert.deepStrictEqual(
            sig.tensorPow([1,2,3], 1),
            [1,2,3]
        );
    });
});

describe('indexToInt', function() {
    it('should calculate the flattened index of a tensor index', function() {
        assert.deepStrictEqual(
            sig.indexToInt([3,1], [4,3]), 10
        );
        assert.deepStrictEqual(
            sig.indexToInt([3,1,0], [4,3,2]), 20
        );
    });

    it('should be a right inverse of intToIndex', function() {
        var shape = [10,5,18,6,5];
        assert.deepStrictEqual(
            sig.intToIndex(sig.indexToInt([8,3,9,5,4], shape), shape),
            [8,3,9,5,4]
        )
    });
});

describe('indexToInt', function() {
    it('should calculate the tensor index given the flat index', function() {
        assert.deepStrictEqual(
            sig.intToIndex(1621, [6,7,8,9]), [3,1,4,1]
        );
    });

    it('should be a right inverse of indexToInt', function() {
        var shape = [10,5,18,6,5];
        assert.deepStrictEqual(
            sig.indexToInt(sig.intToIndex(2811, shape), shape), 2811
        )
    });
});

describe('reindex', function() {
    it('should calculate the new index', function() {
        assert.deepStrictEqual(
            sig.reindex([3], [4], [2,2]), [1,1]
        );

        assert.deepStrictEqual(
            sig.reindex([1,2], [4,4], [2,2,2,2]), [0,1,1,0]
        );
    });

    it('should be compatible with reshape', function() {
        var A = math.range(0,720).reshape([2,3,4,5,6]).valueOf();
        var B = math.reshape(A, [20,36]);
        var r = sig.reindex([15,29], [20,36], [2,3,4,5,6]);
        assert.deepStrictEqual(
            B[15][29], A[r[0]][r[1]][r[2]][r[3]][r[4]]
        );
        var r = sig.reindex([3,7], [20,36], [2,3,4,5,6]);
        assert.deepStrictEqual(
            B[3][7], A[r[0]][r[1]][r[2]][r[3]][r[4]]
        );
    });
});

describe('pathLength', function() {
    it('calculate length of piecewise linear path', function() {
        assert.deepStrictEqual(
            sig.pathLength([[0,0],[3,4], [0,0]]), 10
        );
    })
});

describe('sig', function() {
    it('should handle the edge cases', function() {
        // level 0 should give identity element
        assert.deepStrictEqual(
            sig.sig([[1,2,3],[3,4,5]], 0),
            [1]
        );
        // constant path (i.e. 1 point) should give 0 signature with right size
        assert.deepStrictEqual(
            sig.sig([[1,2,3]], 1),
            [1, [0,0,0]]
        );
    });

    it('should give the right dimensions', function() {
        var n = 5; // 5 levels
        // test for 1D-5D paths
        for (var d = 1; d <= 5; d++) {
            var expected = [1];
            for (var k = 1; k <= 5; k++) {
                var rank = math.add(math.zeros([k]), d);
                expected.push(math.zeros(rank));
            }

            assert.deepStrictEqual(
                sig.sig(math.zeros([2, d]), n), expected
            );
        }
        assert.deepStrictEqual(
            sig.sig([[0,0,0],[0,0,0]], 4),
            [1, [0,0,0], math.zeros([3,3]),
             math.zeros([3,3,3]), math.zeros([3,3,3,3])]
        )
    });

    it('should compute the signature for simple examples', function() {
        assert.deepStrictEqual(
            sig.sig([[1,1], [3,4], [5,2], [8,6]], 2),
            [1, [7,5], [[24.5, 19], [16, 12.5]]]
        );

        assert.deepStrictEqual(
            sig.sig([[1,5], [2,9], [3,4]], 2),
            [1, [2,-1], [[2.0, -5.5], [3.5, 0.5]]]
        );
    })

    it('should compute the signature for larger examples', function() {
        // high dim path
        var n = 2;
        var X = [[-10,  8,  2,  4, -3, -1,  4, -4, -7, -6, -9, -4, -5,  5,  5],
            [ -4, -8, -3, -7, -7, -4,  3, -6,  0,  6,  8,  4, -4,  4, -7],
            [  1, -8,  9,  1,  7, -6, -6, -4, -5, -8, -2,  0,  9, -3,  2],
            [  8,  1,  9,  6, -1,  0, -1,  8,  7,  0, -8,  0, -9, -6, -8],
            [  4, -6,-10,  4,  6, -8, -6, -9, -8, -2, -3,  3,  6,  3,  9],
            [ -2,  4,  7,  6, -2, -1, -5, -7,  8, -8, -4,  6, -1,  9,  4],
            [ -6, -5,  2,-10, -6, -1, -2,  8, -2, -3,  3, -7, -6, -5,  0],
            [  6,  9, -2, -5,  4, -4, -1, -1,  8,  2, -1, -5,  7,  8,  3],
            [ -2,  9, -6, -2,  3,  3, -4,  0,  4, -8, -9,  5,  6,  8, -8],
            [  2,  0, -1, -2,  2, -1, -7, -2,  8,  2, -9,-10,  4,  8, -8]];
        var Y = [   1. ,  12. ,  -8. ,  -3. ,  -6. ,   5. ,   0. , -11. ,   2. ,  15. ,
            8. ,   0. ,  -6. ,   9. ,   3. , -13. ,  72. ,  76.5, -98. ,  87.5,
            69. ,  24. ,-114. , -73. , 120.5,  -5. ,-146. , -17. ,  83.5, 150. ,
            -13.5,-172.5,  32. , -60.5,  14.5,-125. ,  47. , 114. , -59. , -93.5,
            -6.5,   6. , 102.5,-133. ,  47. , -61.5,  62. ,  84.5,   4.5,   0.5,
            -40. ,  29. ,  77.5, 187. ,   0. ,  45.5, -30. , -56. ,-150. ,-130. ,
            -6. ,-159.5,  33.5,  17.5,  18. ,-150.5,  32.5,  73. ,  -6. , -57.5,
            -52.5,  47.5,  60. ,-179.5,   5.5,  92. ,  -9. ,  85. ,  25. , 120.5,
            12.5,  44.5, -54.5, -39. ,  66.5, -64. ,-144.5,   3. , -10. ,  82.5,
            -2. , -24. , -47. , -29. , -32.5, -44.5,   0. ,  30. ,  25. , -34.5,
            56.5,  17. , -43.5, -62. , -32. , -41.5, -18. , -26. , -44.5,  -7. ,
            -0.5, -30. ,  60.5, -42. , -97.5, -12. ,  85. , 131. ,   8.5, -29.5,
            36.5,  97. ,  43. ,-193. ,  -6. ,  49. , -25. ,  20. ,   2. , -18.5,
            122. , -48. , -59. ,  24. ,  32. , -11.5,  59.5, -26.5, -45. , -32.5,
            8.5,  34.5, -67.5,  48.5, 112.5,  88. , -82. ,-124.5,   7.5,  31.5,
            -159. , 101. , -57.5, -69.5,   4.5, 104. , -56.5, -76. ,-106. ,  32. ,
            32. ,  21.5,  35.5, 163. ,  68.5,  14.5, 146. ,  -6. ,  30. , -47.5,
            144.5, -17. , -85. ,  48. ,  82. , -21.5,   0. ,  -3.5, 190. , -29. ,
            -50. , -55. , -54.5,  74. , -24. , -33. ,  43.5, -65. ,  47. ,  34.5,
            -83.5,   3.5,  18. , -17.5, -32.5, -47. ,  24.5,  61. , 123. , 125.5,
            55. ,  62. ,-107.5,  -6. , 127.5, -91. ,-190. , -36.5,  40.5,  59. ,
            -82.5,-114. , -71. , 121. , -23.5, -67.5,  32. ,  -3.5, -26. ,  13.5,
            -44.5,  29. ,  14.5, -32. ,   4.5, -86.5,-142.5, 165.5,  45. , -14. ,
            -63. ,  41.5, 106.5, -14.5, -36. ,-118.5,  50. , 125. , -34.5,  47.5,
            84.5];
        var Z = math.flatten(sig.sig(X, 2));
        var ep = math.max(math.subtract(Y, Z));
        assert(ep < 1.0e-6);

        // high level truncate
        var n = 7;
        var X = [[-10, -4],
            [-10, -2],
            [ -4,  7],
            [  9,  5],
            [  3, -7]];
        var Y = [ 1.00000000e+00, 1.30000000e+01,-3.00000000e+00, 8.45000000e+01,
            -1.90000000e+02, 1.51000000e+02, 4.50000000e+00, 3.66166667e+02,
            -1.67033333e+03, 8.70666667e+02, 1.24766667e+03, 5.46166667e+02,
            -1.92533333e+03, 7.36166667e+02,-4.50000000e+00, 1.19004167e+03,
            -9.22608333e+03, 5.96391667e+03, 1.20016667e+04,-3.04583333e+02,
            -5.95333333e+03,-1.83033333e+03,-5.40608333e+03, 2.46825000e+03,
            -1.30390000e+04, 7.00200000e+03, 1.24752500e+04, 2.19925000e+03,
            -9.58725000e+03, 2.45958333e+03, 3.37500000e+00, 3.09410833e+03,
            -3.81474167e+04, 3.26505833e+04, 6.95678333e+04,-1.02104167e+04,
            -2.69901667e+04,-2.56916667e+04,-5.42039667e+04, 5.48708333e+03,
            -1.90731667e+04, 1.47333333e+04, 3.02580333e+04, 6.42783333e+03,
            -2.60696667e+03, 1.04777833e+04, 1.75874833e+04, 6.65004167e+03,
            -6.53940833e+04, 4.57484167e+04, 9.63488667e+04,-7.60208333e+03,
            -3.74421333e+04,-2.33353833e+04,-5.41316833e+04, 9.92150000e+03,
            -5.80693000e+04, 3.15534500e+04, 6.24846500e+04, 6.63936667e+03,
            -3.20691833e+04, 6.17260833e+03,-2.02500000e+00, 6.70390139e+03,
            -1.27220569e+05, 1.40186431e+05, 2.98953672e+05,-6.81440694e+04,
            -1.33961328e+05,-1.57471528e+05,-3.19882511e+05, 2.38989306e+04,
            3.16867222e+03, 4.46744722e+04, 9.16334889e+04, 4.68742222e+04,
            7.16519889e+04, 9.17104889e+04, 1.79948206e+05, 5.88355556e+03,
            -1.09165578e+05, 7.32082222e+04, 1.60439989e+05,-2.21160278e+04,
            -5.45895111e+04,-5.62030111e+04,-1.17684794e+05, 3.97647222e+03,
            -7.28385111e+04, 2.30719889e+04, 5.17012056e+04,-7.03938611e+03,
            -4.50930444e+04,-2.01824944e+04,-4.59019028e+04, 1.61133972e+04,
            -2.43506861e+05, 2.33069939e+05, 4.98870556e+05,-8.88443111e+04,
            -1.91010944e+05,-2.13505444e+05,-4.39496128e+05, 3.36591889e+04,
            -6.33939444e+04, 7.66515556e+04, 1.58877872e+05, 5.16011806e+04,
            3.96976222e+04, 9.43896722e+04, 1.76747064e+05, 2.28359597e+04,
            -2.73576986e+05, 2.02062514e+05, 4.35281956e+05,-4.68268611e+04,
            -1.42412294e+05,-1.26430244e+05,-2.72296603e+05, 2.95256111e+04,
            -1.84647906e+05, 1.00204144e+05, 2.09811953e+05, 1.61314153e+04,
            -8.08540889e+04, 1.24672528e+04, 1.01250000e+00, 1.24501026e+04,
            -3.57004405e+05, 4.88159028e+05, 1.03202594e+06,-3.09185772e+05,
            -5.82168456e+05,-6.91563523e+05,-1.39326675e+06, 1.16956728e+05,
            1.99682544e+05, 1.87811477e+05, 3.76319246e+05, 2.65656377e+05,
            5.02751846e+05, 5.35523279e+05, 1.06858554e+06,-1.00460218e+04,
            -2.06929956e+05, 6.29349770e+04, 1.50044246e+05,-5.42681230e+04,
            -1.13619154e+05,-1.24191721e+05,-2.54456459e+05,-4.44453730e+04,
            -1.99624654e+05,-6.39112206e+04,-1.17641459e+05,-1.13115271e+05,
            -2.59935359e+05,-2.34396675e+05,-4.73890499e+05, 1.93156532e+04,
            -3.46595706e+05, 3.81090227e+05, 8.16876146e+05,-1.58716873e+05,
            -2.91995254e+05,-3.73001821e+05,-7.56772259e+05, 4.61538770e+04,
            1.20952460e+04, 7.73746794e+04, 1.60234741e+05, 9.31866294e+04,
            1.47972841e+05, 1.84347525e+05, 3.64320301e+05, 2.36077520e+04,
            -2.61907504e+05, 2.25975929e+05, 4.92654241e+05,-5.07841206e+04,
            -1.04751659e+05,-1.33392975e+05,-2.76578699e+05, 3.07720044e+04,
            -1.00115909e+05, 9.06717746e+04, 1.95931801e+05, 3.23972996e+04,
            1.35541508e+04, 5.38287091e+04, 1.00116807e+05, 3.16930851e+04,
            -7.46378604e+05, 9.12899530e+05, 1.93969961e+06,-5.01389570e+05,
            -9.50643793e+05,-1.13971356e+06,-2.30346591e+06, 1.69303180e+05,
            1.91178707e+05, 2.78426940e+05, 5.63517086e+05, 3.69072390e+05,
            6.52160186e+05, 7.38043069e+05, 1.46528758e+06, 1.32023048e+04,
            -5.02540543e+05, 2.89047690e+05, 6.43453586e+05,-1.07926860e+05,
            -2.43143314e+05,-2.65620431e+05,-5.51069421e+05,-1.75297345e+04,
            -3.61693564e+05, 3.03063190e+04, 8.68370786e+04,-9.90269060e+04,
            -3.10801071e+05,-2.22150213e+05,-4.62995132e+05, 5.20114839e+04,
            -9.43436501e+05, 9.81693232e+05, 2.10340770e+06,-4.16645318e+05,
            -8.07589198e+05,-9.80076314e+05,-1.99579625e+06, 1.27750807e+05,
            -6.50974476e+04, 2.41908436e+05, 5.01450245e+05, 2.36832211e+05,
            3.19818095e+05, 4.58116454e+05, 8.92367235e+05, 6.07099669e+04,
            -8.37799267e+05, 6.39881950e+05, 1.39336422e+06,-1.69998275e+05,
            -4.05099933e+05,-4.38292241e+05,-9.17526377e+05, 6.98346899e+04,
            -4.56921196e+05, 2.45267995e+05, 5.30785818e+05, 3.26517911e+04,
            -1.63801874e+05, 2.10666859e+04,-4.33928571e-01];
        var Z = math.flatten(sig.sig(X, 7));
        var ep = math.max(math.subtract(Y, Z));
        assert(ep < 1.0e-2);

        // mix
        var n = 5;
        var X = [[-2, 3, 8],
            [-8,-3, 2],
            [ 5, 5,-7],
            [-4,-6,-8],
            [-8, 3,-6]];
        var Y = [ 1.00000000e+00,-6.00000000e+00, 0.00000000e+00,-1.40000000e+01,
            1.80000000e+01,-4.15000000e+01, 3.00000000e+00, 4.15000000e+01,
            0.00000000e+00, 3.05000000e+01, 8.10000000e+01,-3.05000000e+01,
            9.80000000e+01,-3.60000000e+01, 2.78333333e+01,-8.96666667e+01,
            1.93333333e+02,-1.29833333e+02,-1.79000000e+02, 1.61333333e+02,
            1.10500000e+02,-2.61666667e+02,-2.21166667e+02, 2.59666667e+02,
            6.85000000e+01,-1.29833333e+02, 0.00000000e+00,-6.21666667e+01,
            -7.25000000e+01, 1.24333333e+02,-3.02833333e+02,-3.23666667e+02,
            6.49500000e+02, 4.81333333e+02,-5.77000000e+02,-6.21666667e+01,
            1.78666667e+02,-8.07666667e+02, 1.24166667e+02,-4.57333333e+02,
            5.40000000e+01,-1.59125000e+02,-1.55833333e+01, 3.10375000e+02,
            1.37625000e+02, 1.47708333e+02, 5.84750000e+02,-2.00125000e+02,
            5.28000000e+02,-8.90375000e+02, 5.85875000e+02,-5.60416667e+01,
            -8.21250000e+01,-3.11958333e+02,-5.66250000e+01, 8.34625000e+02,
            -4.47291667e+02, 6.45291667e+02,-1.06875000e+03, 3.63750000e+01,
            -1.05150000e+03,-2.99125000e+02, 2.16958333e+02,-5.05458333e+02,
            1.56550000e+03,-6.04958333e+02, 1.17658333e+03, 7.39125000e+02,
            -8.61125000e+02, 1.08458333e+02,-4.21625000e+02, 9.35875000e+02,
            5.60541667e+02,-5.71875000e+02, 1.33750000e+01, 4.65125000e+02,
            6.41375000e+02,-9.35875000e+02,-2.86958333e+02, 3.11958333e+02,
            2.27373675e-13, 7.80416667e+01, 1.56041667e+02,-2.34125000e+02,
            6.17541667e+02, 8.61250000e+01,-1.27912500e+03,-1.62387500e+03,
            9.67041667e+02, 2.34125000e+02,-7.69958333e+02, 2.33045833e+03,
            -4.65125000e+02, 1.27445833e+03, 1.00358333e+03,-3.73625000e+02,
            1.25083333e+03,-3.18612500e+03, 2.10462500e+03, 1.72087500e+03,
            -4.33816667e+03, 1.68375000e+02, 1.33583333e+02, 3.47362500e+03,
            -2.93012500e+03,-2.65375000e+02, 9.81541667e+02,-7.80416667e+01,
            4.05208333e+02,-2.02204167e+03,-4.04583333e+01, 4.16291667e+02,
            3.80933333e+03,-5.49112500e+03,-3.50291667e+03, 5.18270833e+03,
            2.52791667e+02,-1.66695833e+03, 4.93675000e+03,-2.37916667e+01,
            1.60066667e+03,-6.48000000e+01, 3.49583333e+01,-1.89950000e+02,
            8.14916667e+02,-2.56675000e+02,-4.65966667e+02, 8.53300000e+02,
            4.68991667e+02,-7.95116667e+02,-2.15350000e+03, 1.86924167e+03,
            1.03195000e+03,-1.92496667e+03, 3.58708333e+02, 3.46883333e+02,
            -5.20300000e+02, 5.30675000e+02,-1.11345000e+03,-3.03420000e+03,
            4.18882500e+03, 3.85005000e+03,-4.39505000e+03,-6.31408333e+02,
            1.85613333e+03,-4.63270000e+03, 6.05258333e+02,-2.27758333e+03,
            3.21641667e+03,-5.22275833e+03,-2.54063333e+03, 3.19178333e+03,
            1.63112500e+03,-1.04803333e+03, 3.35361667e+03, 1.22050833e+03,
            -1.72366667e+02, 5.75450000e+02,-1.65754167e+03,-5.39700000e+02,
            1.18075000e+03,-5.80591667e+02,-5.51966667e+02, 1.23371667e+03,
            6.53658333e+02,-8.12366667e+02,-3.66038333e+03, 5.85517500e+03,
            4.95896667e+03,-5.45328333e+03,-1.14700833e+03, 2.33730000e+03,
            -6.43145000e+03, 4.29508333e+02,-2.64103333e+03, 4.16030000e+03,
            -9.33517500e+03,-7.04845000e+03, 1.00744500e+04,-5.14575000e+02,
            -4.40970000e+03, 1.27058000e+04, 8.36925000e+02, 1.33925000e+03,
            2.55200000e+02,-3.31282500e+03,-3.06595000e+03, 3.78846667e+03,
            3.53408333e+02,-2.05461667e+03, 6.79613333e+03, 7.23341667e+02,
            1.91716667e+02,-6.41670000e+03, 1.19084250e+04, 8.86275000e+03,
            -1.03261167e+04,-1.28290833e+03, 4.39046667e+03,-1.27063333e+04,
            7.62583333e+01,-3.81721667e+03,-1.91279167e+03, 3.86686667e+03,
            1.50565833e+03,-1.21109167e+03,-2.70725000e+03,-1.76408333e+02,
            -2.62709167e+03,-4.88366667e+02,-1.17557500e+03, 8.80075000e+02,
            5.28333333e+01, 9.06925000e+02,-1.88470833e+03, 2.32236667e+03,
            1.00224167e+03,-2.86932500e+03, 9.86700000e+02,-1.14207500e+03,
            2.66590833e+03,-1.51320000e+03, 1.67975833e+03, 1.18917500e+03,
            8.67833333e+01, 1.04859167e+03,-1.94699167e+03, 1.41296667e+03,
            -2.01740833e+03,-1.76792500e+03, 2.68083333e+03,-1.21075000e+02,
            1.85829167e+03,-3.48355000e+03,-1.49559167e+03, 1.59667500e+03,
            -5.80133333e+02,-6.59741667e+02,-1.51304167e+03, 2.32236667e+03,
            6.91908333e+02,-5.80591667e+02, 1.13686838e-12,-7.34083333e+01,
            -1.14841667e+02, 2.93633333e+02,-9.52825000e+02,-4.48658333e+02,
            2.66670000e+03, 3.71059167e+03,-2.32217500e+03,-4.40450000e+02,
            1.91867500e+03,-4.80165833e+03, 9.39800000e+02,-2.47620833e+03,
            1.59241667e+02,-4.22520000e+03,-6.30690833e+03, 1.17831750e+04,
            -4.54005000e+03,-5.64907500e+03, 1.57183417e+04,-3.14700000e+02,
            1.22059167e+03,-6.66065833e+03, 3.74670000e+03,-1.45740833e+03,
            4.48825000e+02, 2.93633333e+02,-1.93515833e+03, 8.34034167e+03,
            3.29666667e+01, 1.54125000e+02,-1.06613250e+04, 1.60698000e+04,
            1.04339250e+04,-1.48068250e+04,-9.56283333e+02, 5.15845833e+03,
            -1.46428250e+04,-3.60166667e+02,-3.96770833e+03,-2.54545000e+03,
            7.37107500e+03, 5.00680000e+03,-1.05363000e+04,-1.65832500e+03,
            2.71255000e+03,-1.54769500e+04,-1.10182500e+03,-1.89850000e+03,
            1.50574500e+04,-1.09170750e+04,-7.63700000e+02, 2.12055000e+03,
            5.05932500e+03, 2.13480000e+03,-1.05769500e+04, 2.34242500e+03,
            -1.30270000e+03, 2.21385500e+04,-2.07533250e+04,-5.68300000e+03,
            2.11098000e+04, 8.59675000e+02,-2.08795000e+03, 7.33925000e+03,
            3.85017500e+03,-1.20330000e+03,-1.20514667e+04, 1.84589250e+04,
            5.45988333e+03,-5.10720000e+03,-1.06379250e+04,-9.62950000e+02,
            -5.49786667e+03,-3.74707500e+03,-1.68011667e+03,-3.34553333e+03,
            8.76457500e+03, 3.08371667e+03,-3.07113333e+03,-7.34083333e+01,
            8.29550000e+02,-4.63220000e+03,-5.53491667e+02,-1.37108333e+03,
            1.07054667e+04,-8.26807500e+03,-5.74783333e+02, 9.19213333e+03,
            5.37008333e+02, 1.54250000e+02, 8.68133333e+02, 2.43379167e+03,
            -1.97158333e+03,-1.28592833e+04, 1.21866750e+04,-4.01583333e+03,
            1.74183000e+04,-1.74008250e+04,-9.69945000e+03, 2.58694167e+04,
            -3.98482500e+03, 8.69866667e+02,-2.96491167e+04, 2.69999250e+04,
            3.82513333e+03,-1.06926167e+04, 1.39758333e+02,-1.54250000e+03,
            1.35735500e+04,-2.22770833e+03, 4.33333333e+01,-2.50614167e+04,
            3.01866750e+04, 1.57670333e+04,-2.99855333e+04, 7.70416667e+01,
            7.75025000e+03,-2.12203833e+04,-1.85429167e+03,-4.48186667e+03];
        var ep = math.norm(math.subtract(Y, math.flatten(sig.sig(X, 5))));
        assert(ep < 1.0e-3);
    })
})
